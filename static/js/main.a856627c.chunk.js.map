{"version":3,"sources":["Message.ts","Card.tsx","Results.tsx","Selection.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["MessageType","Card","children","color","onClick","size","className","style","width","height","flex","justifyContent","alignItems","margin","background","display","Results","users","numberOfFinishedUsers","Object","keys","filter","key","value","length","totalNumberOfUsers","map","padding","name","fontSize","values","Selection","currentSelection","ownId","Uuid","format","socket","WebSocket","sendData","data","type","CurrentValue","clientId","send","JSON","stringify","window","onbeforeunload","Leave","App","useState","loading","setLoading","undefined","setUsers","setData","reset","_","toPairs","reduce","newUsers","user","useEffect","onopen","RequestCurrentValue","onmessage","event","message","parse","Reset","onclose","flexDirection","marginLeft","onChange","target","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a856627c.chunk.js","sourcesContent":["export enum MessageType {\n  CurrentValue = 'current_value',\n  Leave = 'leave',\n  RequestCurrentValue = 'request_current_value',\n  Reset = 'reset',\n}\n\nexport interface RequestCurrentValue {\n  type: MessageType.RequestCurrentValue;\n}\n\nexport interface CurrentValue {\n  type: MessageType.CurrentValue;\n  clientId: string;\n  name: string;\n  value: string | undefined;\n}\n\nexport interface Reset {\n  type: MessageType.Reset;\n}\n\nexport interface Leave {\n  type: MessageType.Leave;\n  clientId: string;\n}\n\nexport type Message = RequestCurrentValue | CurrentValue | Reset | Leave;\n","import React, { ReactElement } from 'react';\nimport { Color } from 'csstype';\n\ninterface IProps {\n  children: ReactElement;\n  color?: Color;\n  onClick?: () => void;\n  size?: number;\n}\n\nexport const Card = ({ children, color, onClick, size }: IProps) => (\n  <div\n    className=\"card\"\n    style={{\n      width: size || 150,\n      height: size || 150,\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center',\n      // overflow: 'hidden',\n      margin: 8,\n      background: color ? color : '#fff',\n      display: 'inline-block',\n    }}\n    onClick={onClick}\n  >\n    {children}\n  </div>\n);\n","import React from 'react';\nimport { Users } from './User';\nimport { Card } from './Card';\n\ninterface IProps {\n  users: Users;\n}\n\nexport const Results = ({ users }: IProps) => {\n  const numberOfFinishedUsers = Object.keys(users).filter(\n    key => !!users[key] && !!users[key].value,\n  ).length;\n  const totalNumberOfUsers = Object.keys(users).length;\n  if (numberOfFinishedUsers < totalNumberOfUsers) {\n    return (\n      <div>\n        {numberOfFinishedUsers} / {totalNumberOfUsers}\n      </div>\n    );\n  }\n\n  return (\n    <div>\n      {Object.keys(users).map(key => (\n        <Card>\n          <div>\n            <div style={{ padding: 16 }}>{users[key].name}</div>\n            <div style={{ fontSize: 80 }}>{users[key].value}</div>\n          </div>\n        </Card>\n      ))}\n    </div>\n  );\n};\n","import React from 'react';\nimport { Card } from './Card';\n\nconst values = [\n  { value: '0', color: '#fff' },\n  { value: '1', color: '#afa' },\n  { value: '2', color: '#5f5' },\n  { value: '3', color: 'yellow' },\n  { value: '5', color: 'orange' },\n  { value: '8', color: 'red' },\n  { value: '13', color: 'violet' },\n  { value: '20', color: '#bbb' },\n  { value: '?', color: '#fff' },\n];\n\ninterface IProps {\n  currentSelection: string | undefined;\n  onClick: (value: string | undefined) => void;\n}\n\nexport const Selection = ({ currentSelection, onClick }: IProps) => (\n  <div>\n    {values.map(({ value, color }) => (\n      <Card\n        color={\n          currentSelection\n            ? currentSelection === value\n              ? color\n              : 'white'\n            : color\n        }\n        size={50}\n        onClick={() => onClick(value)}\n      >\n        <div style={{ fontSize: 35 }}>{value}</div>\n      </Card>\n    ))}\n  </div>\n);\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport { Users } from './User';\nimport { Results } from './Results';\nimport { Selection } from './Selection';\nimport Uuid from 'pure-uuid';\nimport { MessageType, CurrentValue } from './Message';\nimport _ from 'lodash';\n\n// const initialState: Users = {\n//   '1': { name: 'Janina', value: '3' },\n//   '2': { name: 'Mr. Bones', value: '2' },\n//   '3': { name: 'Felix', value: '5' },\n//   '4': { name: 'Patryk', value: '8' },\n// };\n\nconst ownId = new Uuid(4).format();\n\nconst socket = new WebSocket(\n  'wss://connect.websocket.in/PlanningPokerApp?room_id=Demo',\n);\n\nconst sendData = (name: string, value: string | undefined) => {\n  const data: CurrentValue = {\n    type: MessageType.CurrentValue,\n    clientId: ownId,\n    name,\n    value,\n  };\n  socket.send(JSON.stringify(data));\n};\n\nwindow.onbeforeunload = () => {\n  socket.send(JSON.stringify({ type: MessageType.Leave }));\n};\n\nconst App: React.FC = () => {\n  const [loading, setLoading] = useState(true);\n  const [users, setUsers] = useState<Users>({\n    [ownId]: {\n      name: '',\n      value: undefined,\n    },\n  });\n\n  const { name, value } = users[ownId];\n\n  const setData = (name: string, value: string | undefined) => {\n    sendData(name, value);\n    setUsers(users => ({ ...users, [ownId]: { name, value } }));\n  };\n\n  const reset = () => {\n    setUsers(users =>\n      _(users)\n        .toPairs()\n        .reduce(\n          (newUsers, [key, user]) => ({\n            ...newUsers,\n            [key]: { ...user, value: undefined },\n          }),\n          {},\n        ),\n    );\n  };\n\n  useEffect(() => {\n    socket.onopen = () => {\n      setLoading(false);\n      socket.send(\n        JSON.stringify({\n          type: MessageType.RequestCurrentValue,\n        }),\n      );\n      sendData(name, value);\n    };\n\n    socket.onmessage = event => {\n      const message = JSON.parse(event.data);\n\n      if (!message.type) return;\n\n      switch (message.type) {\n        case MessageType.CurrentValue: {\n          setUsers(users => ({\n            ...users,\n            [message.clientId]: { name: message.name, value: message.value },\n          }));\n          break;\n        }\n        case MessageType.Leave: {\n          const clientId = message.clientId;\n          const userPairs = _(users)\n            .toPairs()\n            .filter(([key]) => key !== clientId);\n          const newUsers = userPairs.reduce(\n            (newUsers, [key, user]) => ({\n              ...newUsers,\n              [key]: { ...user, value: undefined },\n            }),\n            {},\n          );\n          setUsers(newUsers);\n          break;\n        }\n        case MessageType.RequestCurrentValue: {\n          sendData(name, value);\n          break;\n        }\n        case MessageType.Reset: {\n          reset();\n          break;\n        }\n        default:\n          return;\n      }\n    };\n\n    socket.onclose = event => {};\n  }, [name, users, value]);\n\n  if (loading) return <header>Loading ...</header>;\n\n  return (\n    <div className=\"App\">\n      <div style={{ flexDirection: 'row', margin: 16 }}>\n        <label>\n          Dein Name:\n          <input\n            style={{ marginLeft: 16 }}\n            value={name}\n            onChange={event => setData(event.target.value, value)}\n          ></input>\n        </label>\n      </div>\n\n      <div>\n        <button\n          onClick={() => {\n            socket.send(JSON.stringify({ type: MessageType.Reset }));\n            reset();\n          }}\n        >\n          Reset\n        </button>\n      </div>\n\n      <Selection\n        currentSelection={value}\n        onClick={value => setData(name, value)}\n      />\n\n      <Results users={users} />\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}